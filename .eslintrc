{
  "env": {
    "browser": true,
    "node": true,
    "jest": true
  },
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "ecmaFeatures": {
      "jsx": true
    }
  },
  "extends": [
    "airbnb-base",
    "plugin:react/recommended",
    "plugin:jest/recommended",
    "plugin:jsx-a11y/recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:import/recommended",
    "plugin:import/typescript",
    "plugin:@next/next/recommended",
    "plugin:playwright/playwright-test"
  ],
  "plugins": ["react", "react-hooks", "@typescript-eslint"],
  "settings": {
    "import/resolver": {
      "node": {
        "extensions": [".js", ".jsx", ".ts", ".tsx"]
      }
    },
    "react": {
      "version": "detect"
    },
    "jest": {
      "version": "detect"
    }
  },
  "rules": {
    // Enforce line breaks after opening and before closing array brackets
    "array-bracket-newline": ["error", {"multiline": true}],
    // Enforce line breaks between array elements
    "array-element-newline": ["error", {"minItems": 3}],
    // Require braces in arrow function body
    "arrow-body-style": ["error", "as-needed"],
    // Require parens in arrow function arguments
    "arrow-parens": ["error", "as-needed"],
    // Disallow or enforce spaces inside of single line blocks
    "block-spacing": ["error", "never"],
    // Require or disallow trailing commas
    "comma-dangle": [
      "error",
      {
        "arrays": "always-multiline",
        "objects": "always-multiline"
      }
    ],
    // Enforce consistent line breaks inside function parentheses
    "function-paren-newline": ["error", "multiline-arguments"],
    // Ensure consistent use of file extension within the import path
    "import/extensions": 0,
    // When there is only a single export from a module, prefer using default export over named export.
    "import/prefer-default-export": 0,
    // Ensures that there is no resolvable path back to this module via its dependencies.
    "import/no-cycle": [1, {"maxDepth": 5}],
    // Off import errors (becauseof webpack config)
    "import/no-extraneous-dependencies": 0,
    // Ensures an imported module can be resolved to a module on the local filesystem, as defined by standard Node require.resolve behavior.
    "import/no-unresolved": 0,
    // Enforces or forbids new lines between import groups
    "import/order": [
      "error",
      {
        "groups": ["builtin", "external", "internal", "parent", "sibling", "index", "type"],
        "pathGroups": [
          {
            "pattern": "@/**",
            "group": "internal",
            "position": "before"
          },
          {
            "pattern": "./*.css",
            "group": "index",
            "position": "after"
          }
        ],
        "newlines-between": "never",
        "alphabetize": {
          "order": "asc",
          "caseInsensitive": true
        }
      }
    ],
    // Indentation
    "indent": ["error", 4, {"SwitchCase": 1}],
    // Disallow using expect outside of it or test blocks (no-standalone-expect
    "jest/no-standalone-expect": 0,
    // Enforce valid expect() usage (valid-expect)
    "jest/valid-expect": 1,
    // Enforce that a label tag has a text label and an associated control.
    "jsx-a11y/label-has-associated-control": 1,
    // Enforce that autoFocus prop is not used on elements. Autofocusing elements can cause usability issues for sighted and non-sighted users, alike.
    "jsx-a11y/no-autofocus": 1,
    // Enforce consistent linebreak style
    "linebreak-style": ["error", "unix"],
    // Require or disallow an empty line between class members
    "lines-between-class-members": ["error", "always", {"exceptAfterSingleLine": true}],
    // Enforce a maximum line length
    "max-len": [
      "error",
      {
        "code": 160,
        "ignoreComments": true,
        "ignoreStrings": true,
        "ignoreTrailingComments": true,
        "ignoreRegExpLiterals": true
      }
    ],
    // Disallow the use of console
    "no-console": [
      "warn",
      {
        "allow": ["info", "log", "warn", "error", "table", "assert", "dir"]
      }
    ],
    // This rule aims to reduce the scrolling required when reading through your code. It will warn when the maximum amount of empty lines has been exceeded.
    "no-multiple-empty-lines": [2, {"max": 1, "maxEOF": 1, "maxBOF": 2}],
    // Disallow the unary operators ++ and --
    // Disallow the unary operators ++ and --
    "no-plusplus": ["error", {"allowForLoopAfterthoughts": true}],
    // Disallow specified names in exports
    "no-restricted-exports": ["error", {"restrictedNamedExports": [""]}],
    // Disallow variable declarations from shadowing variables declared in the outer scope
    "no-shadow": "off",
    // Disallow dangling underscores in identifiers
    "no-underscore-dangle": [
      "error",
      {
        "allow": ["_this", "_id"],
        "allowAfterThis": true,
        "allowAfterSuper": true
      }
    ],
    // Disallow the use of variables before they are defined.
    "no-use-before-define": "off",
    // Enforce consistent line breaks inside braces
    "object-curly-newline": [
      "error",
      {
        "ObjectExpression": {"multiline": true, "minProperties": 3},
        "ObjectPattern": {"multiline": true},
        "ImportDeclaration": {"multiline": true, "minProperties": 3},
        "ExportDeclaration": {"multiline": true, "minProperties": 3}
      }
    ],
    // Enforce consistent spacing inside braces
    "object-curly-spacing": ["error", "never"],
    // Require or disallow padding lines between statements (padding-line-between-statements)
    "padding-line-between-statements": [
      "error",
      {
        "blankLine": "always",
        "prev": "*",
        "next": "return"
      },
      {
        "blankLine": "always",
        "prev": ["const", "let"],
        "next": "*"
      },
      {
        "blankLine": "always",
        "prev": "*",
        "next": ["const", "let"]
      },
      {
        "blankLine": "any",
        "prev": ["const", "let"],
        "next": ["const", "let"]
      },
      {
        "blankLine": "always",
        "prev": ["if", "for", "while", "switch", "class"],
        "next": "*"
      },
      {
        "blankLine": "always",
        "prev": "directive",
        "next": "*"
      },
      {
        "blankLine": "any",
        "prev": "directive",
        "next": "directive"
      }
    ],
    // Enforce the consistent use of either backticks, double, or single quotes
    "quotes": ["error", "single"],
    // Enforce consistent usage of destructuring assignment of props, state, and context
    "react/destructuring-assignment": [1, "always", {"ignoreClassFields": true}],
    // Forbid certain propTypes
    "react/forbid-prop-types": [0],
    // Enforce a specific function type for function components
    "react/function-component-definition": ["error", {"namedComponents": "arrow-function"}],
    // Ensure destructuring and symmetric naming of useState hook value and setter variables
    "react/hook-use-state": ["error"],
    // Enforce closing bracket location in JSX
    "react/jsx-closing-bracket-location": ["error", "tag-aligned"],
    // Enforce proper position of the first property in JSX
    "react/jsx-first-prop-new-line": ["error", "multiline-multiprop"],
    // Enforce or disallow spaces inside of curly braces in JSX attributes and expressions
    "react/jsx-child-element-spacing": ["error"],
    // Enforce JSX indentation
    "react/jsx-indent": ["error", 4],
    // Validate props indentation in JSX
    "react/jsx-indent-props": ["error", 4],
    // Disallow problematic leaked values from being rendered
    "react/jsx-no-leaked-render": ["error"],
    // Disallow multiple spaces between inline JSX props
    "react/jsx-props-no-multi-spaces": ["error"],
    // This rule checks all JSX components and verifies that all props are sorted alphabetically. A spread attribute resets the verification. The default configuration of the rule is case-sensitive.
    "react/jsx-sort-props": [
      "warn",
      {
        "callbacksLast": true,
        "shorthandFirst": true,
        "shorthandLast": false,
        "ignoreCase": false,
        "multiline": "last",
        "noSortAlphabetically": true,
        "reservedFirst": true
      }
    ],
    // Disallow missing parentheses around multiline JSX
    "react/jsx-wrap-multilines": [
      "error",
      {
        "declaration": "parens-new-line",
        "assignment": "parens-new-line",
        "return": "parens-new-line",
        "arrow": "parens-new-line",
        "condition": "parens-new-line",
        "logical": "parens-new-line",
        "prop": "parens-new-line"
      }
    ],
    // Enforce maximum of props on a single line in JSX
    "react/jsx-max-props-per-line": ["error", {"maximum": 1, "when": "multiline"}],
    // Disallow React to be incorrectly marked as unused
    "react/jsx-uses-react": "off",
    // Prevent definitions of unused state
    "react/no-unused-state": 0,
    // Prevent missing props validation in a React component definition
    "react/prop-types": 0,
    // Disallow missing React when using JSX
    "react/react-in-jsx-scope": "off",
    // Enforce propTypes declarations alphabetical sorting
    "react/sort-prop-types": ["error", {"callbacksLast": true}],
    // Checks effect dependencies
    "react-hooks/exhaustive-deps": "off",
    // Checks rules of Hooks
    "react-hooks/rules-of-hooks": "error",
    // Require or disallow a space before function parenthesis
    "space-before-function-paren": [
      "error",
      {
        "anonymous": "never",
        "named": "never",
        "asyncArrow": "always"
      }
    ],
    // No HTML link for pages
    "@next/next/no-html-link-for-pages": 0,
    // Enforce consistent usage of type imports.
    "@typescript-eslint/consistent-type-imports": ["warn", {"prefer": "type-imports"}],
    // Explicit accessibility modifiers on class properties and methods are not required
    "@typescript-eslint/explicit-member-accessibility": ["off"],
    // Disallow variable declarations from shadowing variables declared in the outer scope
    "@typescript-eslint/no-shadow": ["error"],
    // Disallow the use of variables before they are defined.
    "@typescript-eslint/no-use-before-define": ["error"],
    // Enforce consistent returning of awaited values.
    "@typescript-eslint/return-await": ["off"]
  }
}
